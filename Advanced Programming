{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fd292402-a452-4c28-8f26-ae330069ac0a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Highest Profit Product:\n",
      "Row ID                                           605\n",
      "Order ID                              CA-2015-149958\n",
      "Order Date                                   15/3/15\n",
      "Ship Date                                    19/3/15\n",
      "Ship Mode                             Standard Class\n",
      "Customer ID                                 AS-10240\n",
      "Customer Name                           Alan Shonely\n",
      "Segment                                     Consumer\n",
      "Country                                United States\n",
      "City                                           Tampa\n",
      "State                                        Florida\n",
      "Postal Code                                  33614.0\n",
      "Region                                         South\n",
      "Product ID                           OFF-BI-10000773\n",
      "Category                             Office Supplies\n",
      "Sub-Category                                 Binders\n",
      "Product Name     Insertable Tab Post Binder Dividers\n",
      "Cost                                            2.64\n",
      "Price                                         997.14\n",
      "Profit                                         994.5\n",
      "Quantity                                           9\n",
      "Sales                                  8.974.253.247\n",
      "Name: 601, dtype: object\n",
      "\n",
      "Lowest Profit Product:\n",
      "Row ID                               6709\n",
      "Order ID                   CA-2016-123141\n",
      "Order Date                       14/11/16\n",
      "Ship Date                        19/11/16\n",
      "Ship Mode                  Standard Class\n",
      "Customer ID                      GZ-14470\n",
      "Customer Name               Gary Zandusky\n",
      "Segment                          Consumer\n",
      "Country                     United States\n",
      "City                           Rio Rancho\n",
      "State                          New Mexico\n",
      "Postal Code                       87124.0\n",
      "Region                               West\n",
      "Product ID                FUR-CH-10004287\n",
      "Category                        Furniture\n",
      "Sub-Category                       Chairs\n",
      "Product Name     SAFCO Arco Folding Chair\n",
      "Cost                               991.52\n",
      "Price                               12.66\n",
      "Profit                            -978.86\n",
      "Quantity                               13\n",
      "Sales                       1.645.904.528\n",
      "Name: 6702, dtype: object\n",
      "\n",
      "Most Profitable Category:\n",
      "Category    Technology\n",
      "Profit        28427.56\n",
      "Name: 2, dtype: object\n",
      "\n",
      "Least Profitable Category:\n",
      "Category    Furniture\n",
      "Profit      -19121.29\n",
      "Name: 0, dtype: object\n",
      "\n",
      "Most Profitable Sub-Category:\n",
      "Sub-Category    Accessories\n",
      "Profit             13233.72\n",
      "Name: 0, dtype: object\n",
      "\n",
      "Least Profitable Sub-Category:\n",
      "Sub-Category    Furnishings\n",
      "Profit            -16594.53\n",
      "Name: 9, dtype: object\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the data (make sure to update the file path)\n",
    "file_path = 'data.csv'\n",
    "data = pd.read_csv(file_path, delimiter=';')\n",
    "\n",
    "# Convert relevant columns to appropriate data types\n",
    "data['Profit'] = pd.to_numeric(data['Profit'], errors='coerce')\n",
    "data['Category'] = data['Category'].astype(str)\n",
    "data['Sub-Category'] = data['Sub-Category'].astype(str)\n",
    "\n",
    "# Identify products with the highest and lowest profits\n",
    "highest_profit_product = data.loc[data['Profit'].idxmax()]\n",
    "lowest_profit_product = data.loc[data['Profit'].idxmin()]\n",
    "\n",
    "# Calculate total profits by category and sub-category\n",
    "category_profit = data.groupby('Category')['Profit'].sum().reset_index()\n",
    "subcategory_profit = data.groupby('Sub-Category')['Profit'].sum().reset_index()\n",
    "\n",
    "# Sort the categories and sub-categories by profitability\n",
    "most_profitable_category = category_profit.sort_values(by='Profit', ascending=False).iloc[0]\n",
    "least_profitable_category = category_profit.sort_values(by='Profit', ascending=True).iloc[0]\n",
    "\n",
    "most_profitable_subcategory = subcategory_profit.sort_values(by='Profit', ascending=False).iloc[0]\n",
    "least_profitable_subcategory = subcategory_profit.sort_values(by='Profit', ascending=True).iloc[0]\n",
    "\n",
    "# Output the results\n",
    "print(\"Highest Profit Product:\")\n",
    "print(highest_profit_product)\n",
    "\n",
    "print(\"\\nLowest Profit Product:\")\n",
    "print(lowest_profit_product)\n",
    "\n",
    "print(\"\\nMost Profitable Category:\")\n",
    "print(most_profitable_category)\n",
    "\n",
    "print(\"\\nLeast Profitable Category:\")\n",
    "print(least_profitable_category)\n",
    "\n",
    "print(\"\\nMost Profitable Sub-Category:\")\n",
    "print(most_profitable_subcategory)\n",
    "\n",
    "print(\"\\nLeast Profitable Sub-Category:\")\n",
    "print(least_profitable_subcategory)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6db20f37-2ad9-4c2a-96c8-61a97cc7dd0e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "ValueError",
     "evalue": "Wedge sizes 'x' must be non negative values",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[7], line 22\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m# Pie Chart of Profits by Category\u001b[39;00m\n\u001b[1;32m     21\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m8\u001b[39m, \u001b[38;5;241m8\u001b[39m))\n\u001b[0;32m---> 22\u001b[0m plt\u001b[38;5;241m.\u001b[39mpie(category_profit[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mProfit\u001b[39m\u001b[38;5;124m'\u001b[39m], labels\u001b[38;5;241m=\u001b[39mcategory_profit[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCategory\u001b[39m\u001b[38;5;124m'\u001b[39m], autopct\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%1.1f\u001b[39;00m\u001b[38;5;132;01m%%\u001b[39;00m\u001b[38;5;124m'\u001b[39m, startangle\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m140\u001b[39m)\n\u001b[1;32m     23\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mProfit Distribution by Category\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     24\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/matplotlib/pyplot.py:2799\u001b[0m, in \u001b[0;36mpie\u001b[0;34m(x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops, center, frame, rotatelabels, normalize, hatch, data)\u001b[0m\n\u001b[1;32m   2792\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mpie)\n\u001b[1;32m   2793\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpie\u001b[39m(\n\u001b[1;32m   2794\u001b[0m         x, explode\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, labels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, colors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, autopct\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   2797\u001b[0m         textprops\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, center\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m), frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m   2798\u001b[0m         rotatelabels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;241m*\u001b[39m, normalize\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, hatch\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m-> 2799\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m gca()\u001b[38;5;241m.\u001b[39mpie(\n\u001b[1;32m   2800\u001b[0m         x, explode\u001b[38;5;241m=\u001b[39mexplode, labels\u001b[38;5;241m=\u001b[39mlabels, colors\u001b[38;5;241m=\u001b[39mcolors,\n\u001b[1;32m   2801\u001b[0m         autopct\u001b[38;5;241m=\u001b[39mautopct, pctdistance\u001b[38;5;241m=\u001b[39mpctdistance, shadow\u001b[38;5;241m=\u001b[39mshadow,\n\u001b[1;32m   2802\u001b[0m         labeldistance\u001b[38;5;241m=\u001b[39mlabeldistance, startangle\u001b[38;5;241m=\u001b[39mstartangle,\n\u001b[1;32m   2803\u001b[0m         radius\u001b[38;5;241m=\u001b[39mradius, counterclock\u001b[38;5;241m=\u001b[39mcounterclock,\n\u001b[1;32m   2804\u001b[0m         wedgeprops\u001b[38;5;241m=\u001b[39mwedgeprops, textprops\u001b[38;5;241m=\u001b[39mtextprops, center\u001b[38;5;241m=\u001b[39mcenter,\n\u001b[1;32m   2805\u001b[0m         frame\u001b[38;5;241m=\u001b[39mframe, rotatelabels\u001b[38;5;241m=\u001b[39mrotatelabels, normalize\u001b[38;5;241m=\u001b[39mnormalize,\n\u001b[1;32m   2806\u001b[0m         hatch\u001b[38;5;241m=\u001b[39mhatch, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdata\u001b[39m\u001b[38;5;124m\"\u001b[39m: data} \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m {}))\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/matplotlib/__init__.py:1442\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1439\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m   1440\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m   1441\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1442\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(ax, \u001b[38;5;241m*\u001b[39m\u001b[38;5;28mmap\u001b[39m(sanitize_sequence, args), \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1444\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1445\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[1;32m   1446\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/matplotlib/axes/_axes.py:3196\u001b[0m, in \u001b[0;36mAxes.pie\u001b[0;34m(self, x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops, center, frame, rotatelabels, normalize, hatch)\u001b[0m\n\u001b[1;32m   3193\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx must be 1D\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   3195\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m np\u001b[38;5;241m.\u001b[39many(x \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m0\u001b[39m):\n\u001b[0;32m-> 3196\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWedge sizes \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mx\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m must be non negative values\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   3198\u001b[0m sx \u001b[38;5;241m=\u001b[39m x\u001b[38;5;241m.\u001b[39msum()\n\u001b[1;32m   3200\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m normalize:\n",
      "\u001b[0;31mValueError\u001b[0m: Wedge sizes 'x' must be non negative values"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Bar Plot of Profits by Category\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Profit', y='Category', data=category_profit.sort_values(by='Profit', ascending=False))\n",
    "plt.title('Total Profit by Category')\n",
    "plt.xlabel('Total Profit')\n",
    "plt.ylabel('Category')\n",
    "plt.show()\n",
    "\n",
    "# Bar Plot of Profits by Sub-Category\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.barplot(x='Profit', y='Sub-Category', data=subcategory_profit.sort_values(by='Profit', ascending=False))\n",
    "plt.title('Total Profit by Sub-Category')\n",
    "plt.xlabel('Total Profit')\n",
    "plt.ylabel('Sub-Category')\n",
    "plt.show()\n",
    "\n",
    "# Pie Chart of Profits by Category\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(category_profit['Profit'], labels=category_profit['Category'], autopct='%1.1f%%', startangle=140)\n",
    "plt.title('Profit Distribution by Category')\n",
    "plt.show()\n",
    "\n",
    "# Horizontal Bar Plot for Most and Least Profitable Products\n",
    "plt.figure(figsize=(10, 4))\n",
    "sns.barplot(x=['Highest Profit', 'Lowest Profit'], y=[highest_profit_product['Profit'], lowest_profit_product['Profit']])\n",
    "plt.title('Highest and Lowest Profit Products')\n",
    "plt.ylabel('Profit')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "06113ee8-2f20-4b89-a190-8ba24c0db575",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Group by Region and sum the profits\n",
    "region_profit = data.groupby('Region')['Profit'].sum().reset_index()\n",
    "\n",
    "# Bar Plot of Profits by Region\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Profit', y='Region', data=region_profit.sort_values(by='Profit', ascending=False))\n",
    "plt.title('Total Profit by Region')\n",
    "plt.xlabel('Total Profit')\n",
    "plt.ylabel('Region')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "326b7acc-b4c3-4182-a775-067af634604b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Convert the 'Order Date' to datetime format\n",
    "data['Order Date'] = pd.to_datetime(data['Order Date'], format='%d/%m/%y')\n",
    "\n",
    "# Function to categorize each date into a season\n",
    "def get_season(date):\n",
    "    month = date.month\n",
    "    if month in [12, 1, 2]:\n",
    "        return 'Winter'\n",
    "    elif month in [3, 4, 5]:\n",
    "        return 'Spring'\n",
    "    elif month in [6, 7, 8]:\n",
    "        return 'Summer'\n",
    "    else:\n",
    "        return 'Fall'\n",
    "\n",
    "# Apply the function to create a 'Season' column\n",
    "data['Season'] = data['Order Date'].apply(get_season)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bbe1f650-8afb-45f7-b32b-5cadb1b621fc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Group by Season and sum the profits\n",
    "season_profit = data.groupby('Season')['Profit'].sum().reset_index()\n",
    "\n",
    "# Sort the seasons in the natural order\n",
    "season_order = ['Winter', 'Spring', 'Summer', 'Fall']\n",
    "season_profit['Season'] = pd.Categorical(season_profit['Season'], categories=season_order, ordered=True)\n",
    "season_profit = season_profit.sort_values('Season')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "04ebfd38-9689-46f9-84fc-b1db5ae6f8f3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/categorical.py:641: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  grouped_vals = vals.groupby(grouper)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Bar Plot of Profits by Season\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Season', y='Profit', data=season_profit)\n",
    "plt.title('Total Profit by Season')\n",
    "plt.xlabel('Season')\n",
    "plt.ylabel('Total Profit')\n",
    "plt.show()\n",
    "\n",
    "# Line Plot of Profits by Season (Optional for trend visualization)\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.lineplot(x='Season', y='Profit', data=season_profit, marker='o')\n",
    "plt.title('Profit Trend by Season')\n",
    "plt.xlabel('Season')\n",
    "plt.ylabel('Total Profit')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f57efd0c-03c4-4bc0-976a-7cc846d597ad",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Group by Region and Segment and sum the profits\n",
    "region_segment_profit = data.groupby(['Region', 'Segment'])['Profit'].sum().reset_index()\n",
    "\n",
    "# Grouped Bar Plot\n",
    "plt.figure(figsize=(14, 8))\n",
    "sns.barplot(x='Region', y='Profit', hue='Segment', data=region_segment_profit)\n",
    "plt.title('Total Profit by Region and Segment')\n",
    "plt.xlabel('Region')\n",
    "plt.ylabel('Total Profit')\n",
    "plt.legend(title='Segment')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cfb3e47e-9ade-402c-95c0-dabc40d148ec",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7YAAAK7CAYAAADGExPyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACb90lEQVR4nOzdd3hU1dbH8d+k90ZIQqihE7qASJNepKgXBRSliKCIihBQxEZRQBQBRcDyKgoqWAArICBNujQB6RBIgIRQ0knPvH9EBodkIMTgcOD7uc8819lnz9nrzBiTNWufvU1ms9ksAAAAAAAMysHeAQAAAAAA8G+Q2AIAAAAADI3EFgAAAABgaCS2AAAAAABDI7EFAAAAABgaiS0AAAAAwNBIbAEAAAAAhkZiCwAAAAAwNBJbAAAAAIChkdgCMJzPPvtMJpPJ8nByclKZMmX02GOP6dSpU8U61oULF/TQQw8pKChIJpNJ999/vyTJZDJp7Nixln779u3T2LFjdfz48UKdd+zYsTKZTDp37lyxxnul/v37W71XLi4uqlSpkkaOHKmkpKQbOraU/326FbVq1UqtWrW6Zr/U1FRNnjxZdevWlY+Pj7y9vVWpUiX17NlTa9euvfGB3mSWLFlyy/+7AQD47zjZOwAAKKo5c+aoevXqSktL07p16zRp0iStXbtWe/bskaenZ7GM8frrr2vx4sX69NNPValSJQUEBEiSNm3apDJlylj67du3T+PGjVOrVq1UoUKFYhm7uLi7u2vVqlWSpISEBH333Xd65513tHv3bi1fvvyGjn3l+3S7ysnJUYcOHbRnzx49//zzuvPOOyVJhw8f1k8//aTff/9dLVu2tHOU/60lS5Zo5syZJLcAgGJBYgvAsGrVqqWGDRtKklq3bq2cnBy9/vrr+v777/XII48U+JqLFy/Kw8Oj0GPs3btXlSpVyne+u+66q+iB/8ccHBys4u3UqZOOHTumFStWKDIyUmFhYTdsbCO9TzfSunXrtHHjRn366ad67LHHLO0dO3bUM888o9zcXDtGBwCA8TEVGcAt41ISdeLECUl503C9vLy0Z88edejQQd7e3mrbtq2kvCnGQ4YMUenSpeXi4qKKFSvq5ZdfVkZGhiTp+PHjMplMWrlypfbv32+ZyrtmzRpJ1lNsP/vsM/Xo0UNSXoJ9qe9nn312zZijo6PVvXt3+fj4yNfXV48++qjOnj1rOf74448rICBAFy9ezPfaNm3aqGbNmkV6ry59IXDmzBmr9q+//lpNmjSRp6envLy81LFjR+3cuTPf6z/++GNVrVpVrq6uCg8P11dffaX+/fvnq1YXNBV57969uu++++Tv7y83NzfVq1dPn3/+uVWfNWvWyGQyaf78+Xr55ZcVGhoqHx8ftWvXTgcPHrzm9R05ckSPPfaYqlSpIg8PD5UuXVrdunXTnj17ijyO2WzWW2+9pfLly8vNzU133HGHli5des1YJOn8+fOSpFKlShV43MHB+tdxbGysnnzySZUpU0YuLi4KCwvTuHHjlJ2dbdXv5MmTevDBB+Xt7S0/Pz898sgj+uOPP/L9+3fpZ+HAgQPq2LGjPD09VapUKb355puSpM2bN6t58+by9PRU1apV830ehY3p0s/NlClTNHXqVIWFhcnLy0tNmjTR5s2breKZOXOmJFlNlS/sVH4AAK5EYgvglnHkyBFJUsmSJS1tmZmZuvfee9WmTRv98MMPGjdunNLT09W6dWvNnTtXERER+uWXX/Too4/qrbfeUvfu3SXlJSCbNm1S/fr1VbFiRW3atEmbNm3SHXfckW/cLl26aOLEiZKkmTNnWvp26dLlmjH/73//U+XKlfXdd99p7Nix+v7779WxY0dlZWVJkp577jnFx8frq6++snrdvn37tHr1aj399NNFeq8iIyPl5OSkihUrWtomTpyohx9+WOHh4frmm280b948JScnq0WLFtq3b5+l30cffaQnnnhCderU0aJFi/TKK69o3LhxlqT/ag4ePKimTZvqr7/+0nvvvadFixYpPDxc/fv311tvvZWv/0svvaQTJ07o//7v//TRRx/p8OHD6tatm3Jycq46zunTp1WiRAm9+eabWrZsmWbOnCknJyc1bty4wMS4MOOMGzdOo0aNUvv27fX999/rqaee0qBBgwqVaDds2FDOzs567rnn9OWXXyomJsZm39jYWN1555369ddf9dprr2np0qV6/PHHNWnSJA0aNMjSLzU1Va1bt9bq1as1efJkffPNNwoODlavXr0KPG9WVpa6d++uLl266IcfftA999yj0aNH66WXXlK/fv00YMAALV68WNWqVVP//v21ffv2647pkpkzZ2rFihWaPn26vvzyS6Wmpqpz585KTEyUJL366qt68MEHJcny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vnA6ejJRa7ed1IRnm+rV9zdJkt54polWbY1W5CnrRQW7tAiTk6NJP6zOv8d0cAkPzX2jo56f9rt2HzpXqLEB5CWXF89dsNyPmhKTt86Em5+P3Px8lRp3Tic3bVNQnXC5enspLT5Bh35aLkcXFwXXqyVJ8ildSsF1wrXz/75U/QF5syR2fPKlQurXkndosCTJu1SwSjWoo93zvlX9x3vLyd1df339vbxDQ1QyvJpVTMfXbpKbn49C6tXMF++Fo8e1bfbnavHSc5aK89HlaxRQpaKc3FwVt+eA9s5fpJq97s+3hy5wLcxeN4abIrF94YUXtHr1as2aNUt9+/bVzJkzderUKX344Yd688037R0eiqBWtZL6csa9lucvP5u3yMOipQf16pTfVamcn/73RgcF+LopPilde/af1cPP/GiZMpydk6uBLyzR80821odvdpKHu7NOnErSCxNXa+3my1WVOjWCNHRAQ3m6O+toVIJenfK7fvjV+h67F95YrZeebaqP37pHublm/bErRgNGLlF2Tq4kycnJQZXK+8vN1frH4cEu1XXmbKrW/0EVB/in2lUC9eWky+sfvDwob9G2hSuPaNT09WrbuJzeGn55G5D3RrXK+/+vdum9r3YVepyIKev02pON9dnr7SVJv22J1tgPtuTr16NDFf266YSSUjPzHXNydFClsr5yd70pft0BhhGzfbe2fzTP8nzr+59Kkqp376zwB7rKwdlJ5w4e1ZFlq5WZelFuvt4KrF5FLceMlJvv5QWjGj39mP6c+43WvzlDklSqQW3V7We9xVbDwf20+4vvtPHtWTI5OCiwemU1G/W0HJwcLX3MubmKWrdJ5e++q8B7ZHMyMpUSc0a5/yiGxB89rv0Lf1F2eoa8Q4NVf0Dva96bC8C4TOYr53raQbly5TR37ly1atVKPj4+2rFjhypXrqx58+Zp/vz5WrJkyXWdr0qLD29QpADszezreu1OAAypx9iy9g4BwA0yqWFbe4dQZBXeX2u3sY8/0/K6+s+aNUtvv/22YmJiVLNmTU2fPl0tWrS4QdHdXG6KwvqFCxcUFpa3x5mPj48uXMhbLKB58+Zat26dPUMDAAAAcBszmez3uB5ff/21hg0bppdfflk7d+5UixYtdM899ygqKurGvDE3mZsisa1YsaKOHz8uSQoPD9c333wjSfrpp5/k5+dnv8AA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",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Pivot the data to create a matrix for the heatmap\n",
    "region_segment_pivot = region_segment_profit.pivot(index='Region', columns='Segment', values='Profit')\n",
    "\n",
    "# Heatmap\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(region_segment_pivot, annot=True, fmt=\".1f\", cmap=\"YlGnBu\")\n",
    "plt.title('Profit by Region and Segment')\n",
    "plt.xlabel('Segment')\n",
    "plt.ylabel('Region')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bae1bad1-4382-41d5-b271-e085102234d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "00d9da44-3ce6-4b3b-bec8-750098f913bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (2.16.1)\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (2.1.0)\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (1.6.3)\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (24.3.25)\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (0.5.4)\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (0.2.0)\n",
      "Requirement already satisfied: h5py>=3.10.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (3.11.0)\n",
      "Requirement already satisfied: libclang>=13.0.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (18.1.1)\n",
      "Requirement already satisfied: ml-dtypes~=0.3.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (0.3.2)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (3.3.0)\n",
      "Requirement already satisfied: packaging in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (23.0)\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (4.25.3)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (2.31.0)\n",
      "Requirement already satisfied: setuptools in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (68.0.0)\n",
      "Requirement already satisfied: six>=1.12.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (1.16.0)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (2.4.0)\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (4.11.0)\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (1.14.1)\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (1.62.2)\n",
      "Requirement already satisfied: tensorboard<2.17,>=2.16 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (2.16.2)\n",
      "Requirement already satisfied: keras>=3.0.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (3.3.3)\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (0.36.0)\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorflow) (1.24.3)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from astunparse>=1.6.0->tensorflow) (0.38.4)\n",
      "Requirement already satisfied: rich in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from keras>=3.0.0->tensorflow) (13.7.1)\n",
      "Requirement already satisfied: namex in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from keras>=3.0.0->tensorflow) (0.0.8)\n",
      "Requirement already satisfied: optree in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from keras>=3.0.0->tensorflow) (0.11.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.21.0->tensorflow) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.21.0->tensorflow) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.21.0->tensorflow) (1.26.16)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from requests<3,>=2.21.0->tensorflow) (2024.2.2)\n",
      "Requirement already satisfied: markdown>=2.6.8 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.4.1)\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (0.7.2)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (2.2.3)\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from werkzeug>=1.0.1->tensorboard<2.17,>=2.16->tensorflow) (2.1.1)\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from rich->keras>=3.0.0->tensorflow) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from rich->keras>=3.0.0->tensorflow) (2.15.1)\n",
      "Requirement already satisfied: mdurl~=0.1 in /Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.0.0->tensorflow) (0.1.0)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m24.0\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.2\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install tensorflow\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "02329ea7-5757-4b39-91f4-aeb40ff6eff9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9794 entries, 0 to 9793\n",
      "Data columns (total 23 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   Row ID         9794 non-null   int64         \n",
      " 1   Order ID       9794 non-null   object        \n",
      " 2   Order Date     9794 non-null   datetime64[ns]\n",
      " 3   Ship Date      9794 non-null   object        \n",
      " 4   Ship Mode      9794 non-null   object        \n",
      " 5   Customer ID    9794 non-null   object        \n",
      " 6   Customer Name  9794 non-null   object        \n",
      " 7   Segment        9794 non-null   object        \n",
      " 8   Country        9794 non-null   object        \n",
      " 9   City           9794 non-null   object        \n",
      " 10  State          9794 non-null   object        \n",
      " 11  Postal Code    9783 non-null   float64       \n",
      " 12  Region         9794 non-null   object        \n",
      " 13  Product ID     9794 non-null   object        \n",
      " 14  Category       9794 non-null   object        \n",
      " 15  Sub-Category   9794 non-null   object        \n",
      " 16  Product Name   9794 non-null   object        \n",
      " 17  Cost           9794 non-null   float64       \n",
      " 18  Price          9794 non-null   float64       \n",
      " 19  Profit         9794 non-null   float64       \n",
      " 20  Quantity       9794 non-null   int64         \n",
      " 21  Sales          9794 non-null   float64       \n",
      " 22  Season         9794 non-null   object        \n",
      "dtypes: datetime64[ns](1), float64(5), int64(2), object(15)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Cleaning the 'Sales' column by removing non-numeric characters and converting it to float\n",
    "data['Sales'] = data['Sales'].str.replace('.', '', regex=False).astype(float)\n",
    "\n",
    "# Checking for any other columns that might need cleaning or reformatting\n",
    "data.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "38b9b721-fd12-49ea-911d-5f01f184cb14",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "float64\n",
      "   Profit        Sales\n",
      "0  436.58  36042439770\n",
      "1 -617.40  16643692690\n",
      "2 -378.40   1911397750\n",
      "3 -430.03  57964630180\n",
      "4  -49.58  26142849440\n"
     ]
    }
   ],
   "source": [
    "# Check the data type of the 'Sales' column\n",
    "print(data['Sales'].dtype)\n",
    "\n",
    "# Convert 'Sales' to string if it's not already\n",
    "if not data['Sales'].dtype == 'object':\n",
    "    data['Sales'] = data['Sales'].astype(str)\n",
    "\n",
    "# Replace non-numeric characters if necessary and convert to numeric\n",
    "data['Sales'] = pd.to_numeric(data['Sales'].str.replace('.', '', regex=False), errors='coerce')\n",
    "\n",
    "# Check the first few rows to confirm the correct types\n",
    "print(data[['Profit', 'Sales']].head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcc3ac04-7d71-4b13-985c-889c56e8aa9d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "62551cf6-839c-40bc-bd78-e07b46b39f63",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Row ID;Order ID;Order Date;Ship Date;Ship Mode;Customer ID;Customer Name;Segment;Country;City;State;Postal Code;Region;Product ID;Category;Sub-Category;Product Name;Cost;Price;Profit;Quantity;Sales\\n',\n",
       " '1;CA-2017-152156;8/11/17;11/11/17;Second Class;CG-12520;Claire Gute;Consumer;United States;Henderson;Kentucky;42420;South;FUR-BO-10001798;Furniture;Bookcases;Bush Somerset Collection Bookcase;464.48;901.06;436.58;4;3.604.243.977\\n',\n",
       " '2;CA-2017-152156;8/11/17;11/11/17;Second Class;CG-12520;Claire Gute;Consumer;United States;Henderson;Kentucky;42420;South;FUR-CH-10000454;Furniture;Chairs;Hon Deluxe Fabric Upholstered Stacking Chairs, Rounded Back;756.10;138.70;-617.40;12;1.664.369.269\\n',\n",
       " '3;CA-2017-138688;12/6/17;16/6/17;Second Class;DV-13045;Darrin Van Huff;Corporate;United States;Los Angeles;California;90036;West;OFF-LA-10000240;Office Supplies;Labels;Self-Adhesive Address Labels for Typewriters by Universal;537.68;159.28;-378.40;12;191.139.775\\n',\n",
       " \"4;US-2016-108966;11/10/16;18/10/16;Standard Class;SO-20335;Sean O'Donnell;Consumer;United States;Fort Lauderdale;Florida;33311;South;FUR-TA-10000577;Furniture;Tables;Bretford CR4500 Series Slim Rectangular Table;875.91;445.88;-430.03;13;5.796.463.018\\n\"]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Attempting to read the first few lines of the file to inspect its structure and identify issues\n",
    "with open('data.csv', 'r') as file:\n",
    "    lines = [next(file) for _ in range(5)]\n",
    "\n",
    "lines\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0f94940c-d3fd-4812-a8d4-9c878cbd96c8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Correcting the calculation by ensuring that Sales and Profit values are correctly interpreted as numeric\n",
    "# (We already cleaned the 'Sales' column previously)\n",
    "\n",
    "# Checking if there are any zero values in 'Sales' to avoid division errors\n",
    "data = data[data['Sales'] != 0]\n",
    "\n",
    "# Recalculating the profit margin as a percentage of sales\n",
    "data['Profit Margin'] = (data['Profit'] / data['Sales']) * 100\n",
    "\n",
    "# Grouping by Category to calculate average profit margin per category\n",
    "profit_margin_by_category = data.groupby('Category')['Profit Margin'].mean().reset_index()\n",
    "\n",
    "# Sorting by Profit Margin for better visualization\n",
    "profit_margin_by_category = profit_margin_by_category.sort_values(by='Profit Margin', ascending=False)\n",
    "\n",
    "# Displaying the DataFrame\n",
    "profit_margin_by_category.head()\n",
    "\n",
    "# Plotting the Profit Margin by Category\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(profit_margin_by_category['Category'], profit_margin_by_category['Profit Margin'])\n",
    "plt.xlabel('Category')\n",
    "plt.ylabel('Average Profit Margin (%)')\n",
    "plt.title('Average Profit Margin by Category')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c222064c-5f7b-4102-9d05-dd2470e6d2be",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Category</th>\n",
       "      <th>Profit Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Office Supplies</td>\n",
       "      <td>-9.077113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Category  Profit Margin\n",
       "0  Office Supplies      -9.077113"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying the underlying data of profit margin by category for verification\n",
    "profit_margin_by_category\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e2861873-a880-413a-9710-00165ca7cf2d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Category  Profit Margin\n",
      "0  Office Supplies      -9.077113\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Category</th>\n",
       "      <th>Profit Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Office Supplies</td>\n",
       "      <td>-9.077113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Category  Profit Margin\n",
       "0  Office Supplies      -9.077113"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Calculating the profit margin as a percentage of sales\n",
    "data['Profit Margin'] = (data['Profit'] / data['Sales']) * 100\n",
    "\n",
    "# Grouping by Category to calculate average profit margin per category\n",
    "profit_margin_by_category = data.groupby('Category')['Profit Margin'].mean().reset_index()\n",
    "\n",
    "# Sorting by Profit Margin for better visualization\n",
    "profit_margin_by_category = profit_margin_by_category.sort_values(by='Profit Margin', ascending=False)\n",
    "\n",
    "# Display the DataFrame\n",
    "print(profit_margin_by_category)\n",
    "\n",
    "# If using Jupyter, simply display it directly\n",
    "profit_margin_by_category\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5df9d5fb-ef82-4619-bb69-4e5159863cf1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "0cd5f231-b51d-4407-a17b-79b0b7980414",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Assuming features is your DataFrame\n",
    "# Step 1: Identify non-numeric columns\n",
    "numeric_features = features.select_dtypes(include=['number'])  # Only numeric columns\n",
    "\n",
    "# Step 2: Fill NaN values in numeric columns\n",
    "numeric_features = numeric_features.fillna(numeric_features.mean())\n",
    "\n",
    "# Optional: If you need to handle non-numeric columns, process them separately\n",
    "non_numeric_features = features.select_dtypes(exclude=['number'])\n",
    "\n",
    "# Combine numeric and non-numeric features (if needed)\n",
    "# If you plan to encode non-numeric features, you would do it here\n",
    "\n",
    "# Scaling the numeric features\n",
    "scaler = StandardScaler()\n",
    "scaled_features = scaler.fit_transform(numeric_features)\n",
    "\n",
    "# If non-numeric features are included and processed, concatenate them back\n",
    "# processed_features = pd.concat([pd.DataFrame(scaled_features), non_numeric_features], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aff13d32-11bc-4520-b4ea-f5f019b2d766",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         DATE  Total_Profit      GDP  Profit_to_GDP_Ratio\n",
      "0  2015-01-01       5801.28  58121.0             0.099814\n",
      "1  2015-04-01      -7290.74  58376.0            -0.124893\n",
      "2  2015-07-01      -8766.32  58486.0            -0.149887\n",
      "3  2015-10-01      12151.03  58470.0             0.207816\n",
      "4  2016-01-01     -20444.58  58704.0            -0.348266\n",
      "5  2016-04-01      -3377.72  58787.0            -0.057457\n",
      "6  2016-07-01      18389.64  59084.0             0.311246\n",
      "7  2016-10-01       6628.35  59296.0             0.111784\n",
      "8  2017-01-01      -2746.59  59494.0            -0.046166\n",
      "9  2017-04-01       1022.97  59736.0             0.017125\n",
      "10 2017-07-01     -19303.74  60099.0            -0.321199\n",
      "11 2017-10-01       7222.36  60674.0             0.119036\n",
      "12 2018-01-01       3705.48  61093.0             0.060653\n",
      "13 2018-04-01      12037.14  61336.0             0.196249\n",
      "14 2018-07-01     -17881.21  61622.0            -0.290176\n",
      "15 2018-10-01      13946.96  61619.0             0.226342\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numba import jit\n",
    "\n",
    "# Load the data files with the correct delimiter for profit data\n",
    "profit_data = pd.read_csv('data.csv', delimiter=';')\n",
    "gdp_data = pd.read_csv('GDPUSA.csv')\n",
    "\n",
    "# Convert 'Order Date' in profit data to datetime and extract the quarter for aggregation\n",
    "profit_data['Order Date'] = pd.to_datetime(profit_data['Order Date'], format='%d/%m/%y')\n",
    "profit_data['Quarter'] = profit_data['Order Date'].dt.to_period('Q')\n",
    "\n",
    "# Aggregate profit by quarter\n",
    "profit_by_quarter = profit_data.groupby('Quarter')['Profit'].sum().reset_index()\n",
    "\n",
    "# Rename columns for clarity\n",
    "profit_by_quarter.columns = ['DATE', 'Total_Profit']\n",
    "\n",
    "# Convert the quarter period to datetime to align with GDP data\n",
    "profit_by_quarter['DATE'] = profit_by_quarter['DATE'].dt.to_timestamp()\n",
    "\n",
    "# Convert 'DATE' in GDP data to datetime format\n",
    "gdp_data['DATE'] = pd.to_datetime(gdp_data['DATE'])\n",
    "\n",
    "# Merge the profit data with GDP data on the date\n",
    "merged_data = pd.merge(profit_by_quarter, gdp_data, on='DATE')\n",
    "\n",
    "# Rename the GDP column for clarity\n",
    "merged_data.columns = ['DATE', 'Total_Profit', 'GDP']\n",
    "\n",
    "# Define a function to calculate the profit-to-GDP ratio\n",
    "@jit(nopython=True)\n",
    "def profit_to_gdp_ratio(profits, gdps):\n",
    "    ratios = np.empty(len(profits))\n",
    "    for i in range(len(profits)):\n",
    "        if gdps[i] != 0:  # Avoid division by zero\n",
    "            ratios[i] = profits[i] / gdps[i]\n",
    "        else:\n",
    "            ratios[i] = np.nan  # Set to NaN if GDP is zero to handle the edge case\n",
    "    return ratios\n",
    "\n",
    "# Extract the profit and GDP values from the merged data\n",
    "profits = merged_data['Total_Profit'].values\n",
    "gdps = merged_data['GDP'].values\n",
    "\n",
    "# Calculate the profit-to-GDP ratio using the Numba-optimized function\n",
    "profit_gdp_ratios = profit_to_gdp_ratio(profits, gdps)\n",
    "\n",
    "# Add the calculated ratios back to the merged DataFrame\n",
    "merged_data['Profit_to_GDP_Ratio'] = profit_gdp_ratios\n",
    "\n",
    "# Print the resulting DataFrame\n",
    "print(merged_data)\n",
    "\n",
    "# Save the results to a CSV file\n",
    "merged_data.to_csv('profit_gdp_comparison.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "371fdeae-ac3f-405f-ae55-8d2d6a2b8852",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CSV loaded successfully with skipped bad lines.\n",
      "DataFrame shape: (9794, 22)\n",
      "   Row ID        Order ID Order Date Ship Date       Ship Mode Customer ID  \\\n",
      "0       1  CA-2017-152156    8/11/17  11/11/17    Second Class    CG-12520   \n",
      "1       2  CA-2017-152156    8/11/17  11/11/17    Second Class    CG-12520   \n",
      "2       3  CA-2017-138688    12/6/17   16/6/17    Second Class    DV-13045   \n",
      "3       4  US-2016-108966   11/10/16  18/10/16  Standard Class    SO-20335   \n",
      "4       5  US-2016-108966   11/10/16  18/10/16  Standard Class    SO-20335   \n",
      "\n",
      "     Customer Name    Segment        Country             City  ... Region  \\\n",
      "0      Claire Gute   Consumer  United States        Henderson  ...  South   \n",
      "1      Claire Gute   Consumer  United States        Henderson  ...  South   \n",
      "2  Darrin Van Huff  Corporate  United States      Los Angeles  ...   West   \n",
      "3   Sean O'Donnell   Consumer  United States  Fort Lauderdale  ...  South   \n",
      "4   Sean O'Donnell   Consumer  United States  Fort Lauderdale  ...  South   \n",
      "\n",
      "        Product ID         Category Sub-Category  \\\n",
      "0  FUR-BO-10001798        Furniture    Bookcases   \n",
      "1  FUR-CH-10000454        Furniture       Chairs   \n",
      "2  OFF-LA-10000240  Office Supplies       Labels   \n",
      "3  FUR-TA-10000577        Furniture       Tables   \n",
      "4  OFF-ST-10000760  Office Supplies      Storage   \n",
      "\n",
      "                                        Product Name    Cost   Price  Profit  \\\n",
      "0                  Bush Somerset Collection Bookcase  464.48  901.06  436.58   \n",
      "1  Hon Deluxe Fabric Upholstered Stacking Chairs,...  756.10  138.70 -617.40   \n",
      "2  Self-Adhesive Address Labels for Typewriters b...  537.68  159.28 -378.40   \n",
      "3      Bretford CR4500 Series Slim Rectangular Table  875.91  445.88 -430.03   \n",
      "4                     Eldon Fold 'N Roll Cart System  187.17  137.59  -49.58   \n",
      "\n",
      "   Quantity          Sales  \n",
      "0         4  3.604.243.977  \n",
      "1        12  1.664.369.269  \n",
      "2        12    191.139.775  \n",
      "3        13  5.796.463.018  \n",
      "4        19  2.614.284.944  \n",
      "\n",
      "[5 rows x 22 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "\n",
    "# Define the file path\n",
    "file_path_new = 'data.csv'\n",
    "\n",
    "# Attempt to load the CSV file using various techniques to handle parsing errors\n",
    "try:\n",
    "    # First attempt: Basic read with the specified delimiter and skipping problematic lines\n",
    "    data_new = pd.read_csv(file_path_new, sep=';', encoding='utf-8', on_bad_lines='skip')\n",
    "    print(\"CSV loaded successfully with skipped bad lines.\")\n",
    "    \n",
    "except pd.errors.ParserError as e:\n",
    "    print(\"Initial parsing error encountered:\", e)\n",
    "    print(\"Attempting alternative methods...\")\n",
    "\n",
    "    # Second attempt: Read with a limited number of rows to inspect structure\n",
    "    try:\n",
    "        data_sample = pd.read_csv(file_path_new, sep=';', nrows=10)\n",
    "        print(\"Sample data loaded successfully:\")\n",
    "        print(data_sample.head())\n",
    "    except pd.errors.ParserError as e:\n",
    "        print(\"Error reading sample rows:\", e)\n",
    "    \n",
    "    # Third attempt: Handle quoting issues and escape characters\n",
    "    try:\n",
    "        data_new = pd.read_csv(file_path_new, sep=';', quoting=csv.QUOTE_NONE, escapechar='\\\\')\n",
    "        print(\"CSV loaded successfully with adjusted quoting.\")\n",
    "    except pd.errors.ParserError as e:\n",
    "        print(\"Quoting adjustment failed:\", e)\n",
    "    \n",
    "    # Fourth attempt: Use the 'python' engine to handle irregularities\n",
    "    try:\n",
    "        data_new = pd.read_csv(file_path_new, sep=';', engine='python')\n",
    "        print(\"CSV loaded successfully using the python engine.\")\n",
    "    except pd.errors.ParserError as e:\n",
    "        print(\"Python engine also failed:\", e)\n",
    "\n",
    "# Check if data has been loaded\n",
    "if 'data_new' in locals():\n",
    "    print(\"DataFrame shape:\", data_new.shape)\n",
    "    print(data_new.head())\n",
    "else:\n",
    "    print(\"Failed to load the CSV file with all attempted methods.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "4f95b281-30a3-42f3-a743-e1df50cd0403",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data loaded successfully.\n",
      "Epoch [1/100], Loss: 166220.7137\n",
      "Epoch [2/100], Loss: 118960.3096\n",
      "Epoch [3/100], Loss: 51156.9215\n",
      "Epoch [4/100], Loss: 26158.8028\n",
      "Epoch [5/100], Loss: 17464.2595\n",
      "Epoch [6/100], Loss: 13557.7499\n",
      "Epoch [7/100], Loss: 11293.3638\n",
      "Epoch [8/100], Loss: 9708.5236\n",
      "Epoch [9/100], Loss: 8651.8977\n",
      "Epoch [10/100], Loss: 7984.5252\n",
      "Epoch [11/100], Loss: 7511.8891\n",
      "Epoch [12/100], Loss: 7150.8303\n",
      "Epoch [13/100], Loss: 6799.9230\n",
      "Epoch [14/100], Loss: 6420.5033\n",
      "Epoch [15/100], Loss: 6126.9546\n",
      "Epoch [16/100], Loss: 5692.9364\n",
      "Epoch [17/100], Loss: 5167.4203\n",
      "Epoch [18/100], Loss: 4675.7534\n",
      "Epoch [19/100], Loss: 4216.2800\n",
      "Epoch [20/100], Loss: 3753.1781\n",
      "Epoch [21/100], Loss: 3497.3327\n",
      "Epoch [22/100], Loss: 3295.9581\n",
      "Epoch [23/100], Loss: 3139.9522\n",
      "Epoch [24/100], Loss: 2938.7539\n",
      "Epoch [25/100], Loss: 2847.5487\n",
      "Epoch [26/100], Loss: 2745.8067\n",
      "Epoch [27/100], Loss: 2697.7261\n",
      "Epoch [28/100], Loss: 2533.8378\n",
      "Epoch [29/100], Loss: 2371.9753\n",
      "Epoch [30/100], Loss: 2297.8536\n",
      "Epoch [31/100], Loss: 2177.4289\n",
      "Epoch [32/100], Loss: 2019.9987\n",
      "Epoch [33/100], Loss: 1938.0292\n",
      "Epoch [34/100], Loss: 1752.1956\n",
      "Epoch [35/100], Loss: 1613.8671\n",
      "Epoch [36/100], Loss: 1632.9344\n",
      "Epoch [37/100], Loss: 1630.6193\n",
      "Epoch [38/100], Loss: 1583.2245\n",
      "Epoch [39/100], Loss: 1495.9799\n",
      "Epoch [40/100], Loss: 1460.7652\n",
      "Epoch [41/100], Loss: 1445.3231\n",
      "Epoch [42/100], Loss: 1339.6248\n",
      "Epoch [43/100], Loss: 1283.7458\n",
      "Epoch [44/100], Loss: 1235.3656\n",
      "Epoch [45/100], Loss: 1237.7305\n",
      "Epoch [46/100], Loss: 1219.5106\n",
      "Epoch [47/100], Loss: 1175.6820\n",
      "Epoch [48/100], Loss: 1158.3622\n",
      "Epoch [49/100], Loss: 1143.7747\n",
      "Epoch [50/100], Loss: 1107.0994\n",
      "Epoch [51/100], Loss: 1105.9198\n",
      "Epoch [52/100], Loss: 1108.2916\n",
      "Epoch [53/100], Loss: 1065.9318\n",
      "Epoch [54/100], Loss: 1047.6774\n",
      "Epoch [55/100], Loss: 1020.8330\n",
      "Epoch [56/100], Loss: 980.1696\n",
      "Epoch [57/100], Loss: 982.1105\n",
      "Epoch [58/100], Loss: 920.1251\n",
      "Epoch [59/100], Loss: 924.3455\n",
      "Epoch [60/100], Loss: 888.2447\n",
      "Epoch [61/100], Loss: 840.0403\n",
      "Epoch [62/100], Loss: 829.3930\n",
      "Epoch [63/100], Loss: 889.7715\n",
      "Epoch [64/100], Loss: 894.7561\n",
      "Epoch [65/100], Loss: 844.1283\n",
      "Epoch [66/100], Loss: 817.3023\n",
      "Epoch [67/100], Loss: 815.5667\n",
      "Epoch [68/100], Loss: 818.9449\n",
      "Epoch [69/100], Loss: 788.9574\n",
      "Epoch [70/100], Loss: 758.2633\n",
      "Epoch [71/100], Loss: 729.8452\n",
      "Epoch [72/100], Loss: 715.0401\n",
      "Epoch [73/100], Loss: 714.1925\n",
      "Epoch [74/100], Loss: 719.9407\n",
      "Epoch [75/100], Loss: 723.1277\n",
      "Epoch [76/100], Loss: 706.5841\n",
      "Epoch [77/100], Loss: 658.3874\n",
      "Epoch [78/100], Loss: 656.9569\n",
      "Epoch [79/100], Loss: 685.9736\n",
      "Epoch [80/100], Loss: 710.0968\n",
      "Epoch [81/100], Loss: 683.7504\n",
      "Epoch [82/100], Loss: 653.4834\n",
      "Epoch [83/100], Loss: 636.8361\n",
      "Epoch [84/100], Loss: 603.3295\n",
      "Epoch [85/100], Loss: 584.7645\n",
      "Epoch [86/100], Loss: 597.6217\n",
      "Epoch [87/100], Loss: 588.3693\n",
      "Epoch [88/100], Loss: 609.3261\n",
      "Epoch [89/100], Loss: 618.7379\n",
      "Epoch [90/100], Loss: 596.3632\n",
      "Epoch [91/100], Loss: 588.8272\n",
      "Epoch [92/100], Loss: 573.1258\n",
      "Epoch [93/100], Loss: 577.7558\n",
      "Epoch [94/100], Loss: 548.5267\n",
      "Epoch [95/100], Loss: 537.9195\n",
      "Epoch [96/100], Loss: 529.5095\n",
      "Epoch [97/100], Loss: 527.3348\n",
      "Epoch [98/100], Loss: 528.1904\n",
      "Epoch [99/100], Loss: 517.4770\n",
      "Epoch [100/100], Loss: 517.6750\n",
      "Model saved successfully.\n",
      "Test Loss: 141556.0653\n",
      "Mean Absolute Error: 303.5817\n",
      "R-squared: 0.1255\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "torch.manual_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Load the data with error handling\n",
    "file_path_new = 'data.csv'\n",
    "\n",
    "# Check if the file exists to avoid file not found errors\n",
    "if not os.path.exists(file_path_new):\n",
    "    raise FileNotFoundError(f\"File {file_path_new} not found.\")\n",
    "\n",
    "try:\n",
    "    data_new = pd.read_csv(file_path_new, sep=';')  # Adjust delimiter if needed\n",
    "    print(\"Data loaded successfully.\")\n",
    "except pd.errors.ParserError as e:\n",
    "    print(\"Error loading CSV file:\", e)\n",
    "    # Implement additional error handling or pre-processing here\n",
    "\n",
    "# Replace 'Profit' with the actual target column name\n",
    "target_column = 'Profit'  # Adjust this to your actual target column name\n",
    "if target_column not in data_new.columns:\n",
    "    raise ValueError(f\"Target column '{target_column}' not found in the dataset.\")\n",
    "\n",
    "# Separate features and target\n",
    "features = data_new.drop(columns=[target_column])  \n",
    "target = data_new[target_column]  \n",
    "\n",
    "# Step 1: Identify numeric columns\n",
    "numeric_features = features.select_dtypes(include=['number'])  # Select only numeric columns\n",
    "\n",
    "# Optional: Handle non-numeric columns if necessary\n",
    "non_numeric_features = features.select_dtypes(exclude=['number'])\n",
    "\n",
    "# Step 2: Handle missing values in numeric columns\n",
    "numeric_features = numeric_features.fillna(numeric_features.mean())\n",
    "\n",
    "# If non-numeric features are needed, consider encoding them\n",
    "# For example: one-hot encoding\n",
    "if not non_numeric_features.empty:\n",
    "    non_numeric_features_encoded = pd.get_dummies(non_numeric_features)\n",
    "    features = pd.concat([numeric_features, non_numeric_features_encoded], axis=1)\n",
    "else:\n",
    "    features = numeric_features\n",
    "\n",
    "# Scaling the features\n",
    "scaler = StandardScaler()\n",
    "features_scaled = scaler.fit_transform(features)\n",
    "\n",
    "# Convert to tensors\n",
    "X = torch.tensor(features_scaled, dtype=torch.float32)\n",
    "y = torch.tensor(target.values, dtype=torch.float32).view(-1, 1)\n",
    "\n",
    "# Split into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create DataLoader for training and testing\n",
    "train_dataset = TensorDataset(X_train, y_train)\n",
    "test_dataset = TensorDataset(X_test, y_test)\n",
    "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n",
    "\n",
    "# Define the neural network architecture\n",
    "class ProfitabilityModel(nn.Module):\n",
    "    def __init__(self, input_size):\n",
    "        super(ProfitabilityModel, self).__init__()\n",
    "        self.fc1 = nn.Linear(input_size, 64)\n",
    "        self.fc2 = nn.Linear(64, 32)\n",
    "        self.output = nn.Linear(32, 1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = torch.relu(self.fc1(x))\n",
    "        x = torch.relu(self.fc2(x))\n",
    "        x = self.output(x)\n",
    "        return x\n",
    "\n",
    "# Initialize the model\n",
    "input_size = X_train.shape[1]  # Number of features\n",
    "model = ProfitabilityModel(input_size)\n",
    "\n",
    "# Define loss function and optimizer\n",
    "criterion = nn.MSELoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# Training the model\n",
    "num_epochs = 100\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()  # Set the model to training mode\n",
    "    running_loss = 0.0\n",
    "    for X_batch, y_batch in train_loader:\n",
    "        optimizer.zero_grad()               # Zero the gradients\n",
    "        outputs = model(X_batch)            # Forward pass\n",
    "        loss = criterion(outputs, y_batch)  # Compute loss\n",
    "        loss.backward()                     # Backward pass\n",
    "        optimizer.step()                    # Update weights\n",
    "        running_loss += loss.item()\n",
    "\n",
    "    # Print average loss per epoch\n",
    "    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')\n",
    "\n",
    "# Save the trained model\n",
    "torch.save(model.state_dict(), 'profitability_model.pth')\n",
    "print(\"Model saved successfully.\")\n",
    "\n",
    "# Evaluation on the test set\n",
    "model.eval()  # Set the model to evaluation mode\n",
    "with torch.no_grad():\n",
    "    test_loss = 0.0\n",
    "    y_pred = []\n",
    "    y_true = []\n",
    "    for X_batch, y_batch in test_loader:\n",
    "        outputs = model(X_batch)\n",
    "        loss = criterion(outputs, y_batch)\n",
    "        test_loss += loss.item()\n",
    "        y_pred.extend(outputs.numpy())\n",
    "        y_true.extend(y_batch.numpy())\n",
    "    \n",
    "    print(f'Test Loss: {test_loss/len(test_loader):.4f}')\n",
    "\n",
    "    # Optional: Calculate additional metrics like MAE or R^2\n",
    "    y_pred = np.array(y_pred).flatten()\n",
    "    y_true = np.array(y_true).flatten()\n",
    "    mae = np.mean(np.abs(y_pred - y_true))\n",
    "    r2 = 1 - (np.sum((y_true - y_pred)**2) / np.sum((y_true - np.mean(y_true))**2))\n",
    "    \n",
    "    print(f'Mean Absolute Error: {mae:.4f}')\n",
    "    print(f'R-squared: {r2:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "c424af11-72a4-47a4-83a1-8fdec11542e1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ioanneskatsires/anaconda3/lib/python3.11/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 823us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 2/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 662us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 3/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 722us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 4/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 677us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 5/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 676us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 6/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 675us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 7/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 765us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 8/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 683us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 9/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 672us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 10/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 665us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 0.0010\n",
      "Epoch 11/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 666us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 9.0484e-04\n",
      "Epoch 12/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 665us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 8.1873e-04\n",
      "Epoch 13/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 648us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 7.4082e-04\n",
      "Epoch 14/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 654us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 6.7032e-04\n",
      "Epoch 15/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 670us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 6.0653e-04\n",
      "Epoch 16/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 671us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 5.4881e-04\n",
      "Epoch 17/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 659us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 4.9659e-04\n",
      "Epoch 18/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 685us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 4.4933e-04\n",
      "Epoch 19/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 710us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 4.0657e-04\n",
      "Epoch 20/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 706us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 3.6788e-04\n",
      "Epoch 21/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 721us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 3.3287e-04\n",
      "Epoch 22/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 722us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 3.0119e-04\n",
      "Epoch 23/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 695us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.7253e-04\n",
      "Epoch 24/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 678us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.4660e-04\n",
      "Epoch 25/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 694us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.2313e-04\n",
      "Epoch 26/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 828us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.0190e-04\n",
      "Epoch 27/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 681us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.8268e-04\n",
      "Epoch 28/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 698us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.6530e-04\n",
      "Epoch 29/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 661us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.4957e-04\n",
      "Epoch 30/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 654us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.3534e-04\n",
      "Epoch 31/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 702us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.2246e-04\n",
      "Epoch 32/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 700us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.1080e-04\n",
      "Epoch 33/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 798us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.0026e-04\n",
      "Epoch 34/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 707us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 9.0718e-05\n",
      "Epoch 35/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 700us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 8.2085e-05\n",
      "Epoch 36/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 687us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 7.4274e-05\n",
      "Epoch 37/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 694us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 6.7206e-05\n",
      "Epoch 38/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 675us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 6.0810e-05\n",
      "Epoch 39/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 683us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 5.5023e-05\n",
      "Epoch 40/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 692us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 4.9787e-05\n",
      "Epoch 41/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 691us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 4.5049e-05\n",
      "Epoch 42/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 677us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 4.0762e-05\n",
      "Epoch 43/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 746us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 3.6883e-05\n",
      "Epoch 44/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 704us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 3.3373e-05\n",
      "Epoch 45/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 699us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 3.0197e-05\n",
      "Epoch 46/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 685us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.7324e-05\n",
      "Epoch 47/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 695us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.4724e-05\n",
      "Epoch 48/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 816us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.2371e-05\n",
      "Epoch 49/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 731us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 2.0242e-05\n",
      "Epoch 50/50\n",
      "\u001b[1m245/245\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 726us/step - loss: nan - mae: nan - val_loss: nan - val_mae: nan - learning_rate: 1.8316e-05\n",
      "Test MSE: nan, Test MAE: nan\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Load the necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import LearningRateScheduler\n",
    "\n",
    "# Step 2: Load your data\n",
    "# Replace 'path_to_your_file.csv' with the actual path to your CSV file\n",
    "data = pd.read_csv('data.csv', sep=';', on_bad_lines='skip')  # Assuming semicolon as the delimiter\n",
    "\n",
    "# Step 3: Data Preparation\n",
    "# Dropping columns that are not directly relevant to profitability prediction\n",
    "columns_to_drop = ['Row ID', 'Order ID', 'Order Date', 'Ship Date', 'Customer ID', \n",
    "                   'Customer Name', 'Product ID', 'Product Name', 'Sales']\n",
    "data_cleaned = data.drop(columns=columns_to_drop, errors='ignore')\n",
    "\n",
    "# Identifying categorical columns\n",
    "categorical_cols = data_cleaned.select_dtypes(include=['object']).columns\n",
    "\n",
    "# Encoding categorical features using One-Hot Encoding\n",
    "onehot_encoder = OneHotEncoder(sparse_output=False, drop='first')  # Dropping first to avoid multicollinearity\n",
    "encoded_cats = onehot_encoder.fit_transform(data_cleaned[categorical_cols])\n",
    "\n",
    "# Combining the encoded categories with the numerical data\n",
    "X = pd.concat([data_cleaned.drop(columns=categorical_cols, errors='ignore'), \n",
    "               pd.DataFrame(encoded_cats, index=data_cleaned.index)], axis=1)\n",
    "y = data_cleaned['Profit']\n",
    "\n",
    "# Convert column names to strings to avoid mixed types issue\n",
    "X.columns = X.columns.astype(str)\n",
    "\n",
    "# Splitting the data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Scaling features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Step 4: Build and Train the TensorFlow Model\n",
    "# Setting random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "\n",
    "# Learning rate scheduler function with explicit float conversion\n",
    "def scheduler(epoch, lr):\n",
    "    if epoch < 10:\n",
    "        return float(lr)\n",
    "    else:\n",
    "        return float(lr * tf.math.exp(-0.1))\n",
    "\n",
    "# Building the Sequential model with Dropout for regularization\n",
    "model = Sequential([\n",
    "    Dense(128, activation='relu', input_shape=(X_train_scaled.shape[1],)),  # Input layer with 128 neurons\n",
    "    Dropout(0.2),                                                          # Dropout layer for regularization\n",
    "    Dense(64, activation='relu'),                                          # Hidden layer with 64 neurons\n",
    "    Dropout(0.2),                                                          # Dropout layer\n",
    "    Dense(32, activation='relu'),                                          # Hidden layer with 32 neurons\n",
    "    Dense(1)                                                               # Output layer for regression\n",
    "])\n",
    "\n",
    "# Compiling the model with Mean Squared Error loss and Adam optimizer\n",
    "model.compile(optimizer=Adam(learning_rate=0.001), loss='mse', metrics=['mae'])\n",
    "\n",
    "# Training the model with the training data\n",
    "history = model.fit(X_train_scaled, y_train, \n",
    "                    validation_data=(X_test_scaled, y_test),\n",
    "                    epochs=50, \n",
    "                    batch_size=32, \n",
    "                    verbose=1,\n",
    "                    callbacks=[LearningRateScheduler(scheduler)])\n",
    "\n",
    "# Evaluating the model on the test data\n",
    "evaluation = model.evaluate(X_test_scaled, y_test, verbose=0)\n",
    "print(f\"Test MSE: {evaluation[0]}, Test MAE: {evaluation[1]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d1943cc-af0b-4f4f-be65-97016ecabbae",
   "metadata": {},
   "outputs": [],
   "source": [
    "4)))))Shipping Performance analysis and Predctive model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a87b8266-3e00-420b-9edb-1d7526c080fa",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plotting the cost distribution by region\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(shipping_costs_by_region['Region'], shipping_costs_by_region['sum'], alpha=0.7)\n",
    "plt.title('Total Shipping Costs by Region')\n",
    "plt.xlabel('Region')\n",
    "plt.ylabel('Total Cost')\n",
    "plt.show()\n",
    "\n",
    "# Plotting average cost per shipment by region\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(shipping_costs_by_region['Region'], shipping_costs_by_region['mean'], alpha=0.7)\n",
    "plt.title('Average Shipping Cost per Shipment by Region')\n",
    "plt.xlabel('Region')\n",
    "plt.ylabel('Average Cost')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b68ba11a-f866-4dfa-8af1-3910633a0a41",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 250.1814197381749\n",
      "Mean Squared Error (MSE): 82912.44599746978\n",
      "R-squared (R²): -0.007747036878545943\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/wf/cjvygh994j3ftx3ng509sd6r0000gn/T/ipykernel_7728/1046758882.py:63: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  features['Ship Mode'] = le_mode.fit_transform(features['Ship Mode'])\n",
      "/var/folders/wf/cjvygh994j3ftx3ng509sd6r0000gn/T/ipykernel_7728/1046758882.py:64: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  features['Region'] = le_region.fit_transform(features['Region'])\n",
      "/var/folders/wf/cjvygh994j3ftx3ng509sd6r0000gn/T/ipykernel_7728/1046758882.py:65: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  features['Category'] = le_category.fit_transform(features['Category'])\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from geopy.distance import geodesic\n",
    "\n",
    "# Load the data with error handling for bad lines\n",
    "data = pd.read_csv('data.csv', delimiter=';', engine='python', on_bad_lines='skip')\n",
    "\n",
    "# Converting 'Order Date' and 'Ship Date' to datetime to calculate shipping time\n",
    "data['Order Date'] = pd.to_datetime(data['Order Date'], format='%d/%m/%y', errors='coerce')\n",
    "data['Ship Date'] = pd.to_datetime(data['Ship Date'], format='%d/%m/%y', errors='coerce')\n",
    "data['Shipping Time'] = (data['Ship Date'] - data['Order Date']).dt.days\n",
    "\n",
    "# Mapping of U.S. states to their approximate latitude and longitude coordinates\n",
    "state_coordinates = {\n",
    "    'Alabama': (32.806671, -86.791130),\n",
    "    'Arizona': (33.729759, -111.431221),\n",
    "    'Arkansas': (34.969704, -92.373123),\n",
    "    'California': (36.116203, -119.681564),\n",
    "    'Colorado': (39.059811, -105.311104),\n",
    "    'District of Columbia': (38.897957, -77.036560),\n",
    "    'Florida': (27.766279, -81.686783),\n",
    "    'Georgia': (33.040619, -83.643074),\n",
    "    'Kentucky': (37.668140, -84.670067),\n",
    "    'North Carolina': (35.630066, -79.806419),\n",
    "    'Utah': (40.150032, -111.862434),\n",
    "    'Washington': (47.400902, -121.490494),\n",
    "    'Texas': (31.968599, -99.901813),\n",
    "    'New York': (40.712776, -74.005974),\n",
    "    'Nevada': (38.802610, -116.419389),\n",
    "    'Illinois': (40.633125, -89.398529),\n",
    "    'Wisconsin': (43.784439, -88.787865),\n",
    "    'West Virginia': (38.597626, -80.454903),\n",
    "    # Add more states as needed\n",
    "}\n",
    "\n",
    "# Function to calculate distance between two states based on their coordinates\n",
    "def calculate_distance(row):\n",
    "    state = row['State']\n",
    "    destination = 'California'  # Assume all shipments end in California for simplification\n",
    "    \n",
    "    # Get the coordinates for the state and the assumed destination\n",
    "    origin_coords = state_coordinates.get(state, (0, 0))\n",
    "    destination_coords = state_coordinates.get(destination, (0, 0))\n",
    "    \n",
    "    # Calculate the distance using geodesic distance\n",
    "    return geodesic(origin_coords, destination_coords).miles\n",
    "\n",
    "# Applying the distance calculation to the dataset\n",
    "data['Distance'] = data.apply(calculate_distance, axis=1)\n",
    "\n",
    "# Selecting relevant features and target variable\n",
    "features = data[['Shipping Time', 'Ship Mode', 'Region', 'Category', 'Distance']]\n",
    "target = data['Cost']\n",
    "\n",
    "# Encoding categorical features using LabelEncoder\n",
    "le_mode = LabelEncoder()\n",
    "le_region = LabelEncoder()\n",
    "le_category = LabelEncoder()\n",
    "\n",
    "features['Ship Mode'] = le_mode.fit_transform(features['Ship Mode'])\n",
    "features['Region'] = le_region.fit_transform(features['Region'])\n",
    "features['Category'] = le_category.fit_transform(features['Category'])\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
    "\n",
    "# Standardizing the features\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "# Setting up the Gradient Boosting Regressor\n",
    "gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)\n",
    "\n",
    "# Training the Gradient Boosting model\n",
    "gb_model.fit(X_train, y_train)\n",
    "\n",
    "# Making predictions on the test set\n",
    "gb_predictions = gb_model.predict(X_test)\n",
    "\n",
    "# Evaluating the Gradient Boosting model\n",
    "gb_mae = mean_absolute_error(y_test, gb_predictions)\n",
    "gb_mse = mean_squared_error(y_test, gb_predictions)\n",
    "gb_r2 = r2_score(y_test, gb_predictions)\n",
    "\n",
    "# Displaying evaluation results\n",
    "print(f\"Mean Absolute Error (MAE): {gb_mae}\")\n",
    "print(f\"Mean Squared Error (MSE): {gb_mse}\")\n",
    "print(f\"R-squared (R²): {gb_r2}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a82255bb-5359-456b-83be-c4cfdb65ab4f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 162 candidates, totalling 810 fits\n",
      "Best Parameters: {'learning_rate': 0.01, 'max_depth': 4, 'min_samples_split': 2, 'n_estimators': 50, 'subsample': 1.0}\n",
      "Best Score: -83294.01932334335\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define the parameter grid for Gradient Boosting Regressor\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'max_depth': [3, 4, 5],\n",
    "    'subsample': [0.8, 1.0],\n",
    "    'min_samples_split': [2, 5, 10]\n",
    "}\n",
    "\n",
    "# Setting up the Grid Search with Gradient Boosting Regressor\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=GradientBoostingRegressor(random_state=42),\n",
    "    param_grid=param_grid,\n",
    "    cv=5,\n",
    "    scoring='neg_mean_squared_error',\n",
    "    n_jobs=-1,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Fit the Grid Search to the training data\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Best parameters from the Grid Search\n",
    "best_params = grid_search.best_params_\n",
    "\n",
    "# Best score from the Grid Search\n",
    "best_score = grid_search.best_score_\n",
    "\n",
    "print(\"Best Parameters:\", best_params)\n",
    "print(\"Best Score:\", best_score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "1989ccff-6256-4553-bde6-5a61e4907b54",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extracting feature importances from the trained Gradient Boosting Regressor\n",
    "feature_importances = gb_model.feature_importances_\n",
    "\n",
    "# Mapping feature names to their importances\n",
    "feature_names = ['Shipping Time', 'Ship Mode', 'Region', 'Category', 'Distance']\n",
    "importance_df = pd.DataFrame({\n",
    "    'Feature': feature_names,\n",
    "    'Importance': feature_importances\n",
    "})\n",
    "\n",
    "# Sorting the dataframe by importance values\n",
    "importance_df = importance_df.sort_values(by='Importance', ascending=False)\n",
    "\n",
    "# Plotting the feature importances\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(importance_df['Feature'], importance_df['Importance'], color='skyblue')\n",
    "plt.title('Feature Importance in Gradient Boosting Regressor')\n",
    "plt.xlabel('Features')\n",
    "plt.ylabel('Importance')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e55a7536-792b-494e-958f-3183b6f1e9c3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.003081114463627143"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "\n",
    "# Selecting relevant columns for predicting 'Profit'\n",
    "features = data.drop(columns=['Profit', 'Row ID', 'Order ID', 'Customer ID', 'Customer Name', 'Product ID', 'Product Name'])\n",
    "target = data['Profit']\n",
    "\n",
    "# Identifying categorical and numerical features\n",
    "categorical_features = features.select_dtypes(include=['object']).columns\n",
    "numerical_features = features.select_dtypes(include=[np.number]).columns\n",
    "\n",
    "# Defining the preprocessing steps for numerical and categorical data\n",
    "numerical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "# Combining the preprocessing steps\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_transformer, numerical_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ])\n",
    "\n",
    "# Creating a pipeline that includes the preprocessor and the model\n",
    "model = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                        ('model', LinearRegression())])\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
    "\n",
    "# Fitting the model on the training data\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Making predictions on the test set\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "# Evaluating the model using Mean Squared Error\n",
    "mse = mean_squared_error(y_test, predictions)\n",
    "mse\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80c164c1-ed22-4434-b16c-4840a3cd1824",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6678c25-946b-4ef3-a235-773ed31ce964",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "cd13e71d-877d-44ae-8cad-02513227759b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "file_path = 'cleaned_data.csv'\n",
    "\n",
    "# Re-reading the data with the corrected parameter for handling bad lines\n",
    "data = pd.read_csv(file_path, sep=';', on_bad_lines='skip', engine='python')\n",
    "\n",
    "# Cleaning the data: removing rows with missing critical information and resetting the index\n",
    "data_cleaned = data.dropna().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "24d0980c-6d6b-46e5-8d8f-0da4999fb7e8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[1., 0., 0., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        ...,\n",
       "        [1., 0., 0., 0.],\n",
       "        [1., 0., 0., 0.],\n",
       "        [1., 0., 0., 0.]]),\n",
       " 158960.0)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.optimize import linprog\n",
    "import numpy as np\n",
    "\n",
    "# Define estimated shipping costs and average delivery days for each 'Ship Mode'\n",
    "shipping_info = {\n",
    "    'Standard Class': {'cost': 5, 'days': 5},\n",
    "    'Second Class': {'cost': 10, 'days': 3},\n",
    "    'First Class': {'cost': 20, 'days': 2},\n",
    "    'Same Day': {'cost': 30, 'days': 1}\n",
    "}\n",
    "\n",
    "# Map shipping costs and days to each order based on the 'Ship Mode'\n",
    "data_cleaned['Shipping Cost'] = data_cleaned['Ship Mode'].map(lambda mode: shipping_info.get(mode, {}).get('cost', 0))\n",
    "data_cleaned['Delivery Days'] = data_cleaned['Ship Mode'].map(lambda mode: shipping_info.get(mode, {}).get('days', 0))\n",
    "\n",
    "# Define an example objective to minimize total shipping cost\n",
    "# Decision variables will be for selecting each shipping mode for each order\n",
    "\n",
    "# Cost coefficients for each order for each mode (flattened for linprog)\n",
    "costs = np.array([info['cost'] for mode, info in shipping_info.items() for _ in range(len(data_cleaned))])\n",
    "\n",
    "# Constraints: Each order must have exactly one shipping mode selected (sum of decisions per order = 1)\n",
    "A_eq = np.zeros((len(data_cleaned), len(costs)))\n",
    "for i in range(len(data_cleaned)):\n",
    "    for j in range(len(shipping_info)):\n",
    "        A_eq[i, i * len(shipping_info) + j] = 1  # Constraint: sum of decisions for each order equals 1\n",
    "\n",
    "# Right-hand side of the constraints (each order must have one mode selected)\n",
    "b_eq = np.ones(len(data_cleaned))\n",
    "\n",
    "# Bounds: Each decision variable (mode selection) is binary (0 or 1)\n",
    "bounds = [(0, 1) for _ in range(len(costs))]\n",
    "\n",
    "# Running the linear optimization to minimize shipping costs\n",
    "result_shipping_mode = linprog(costs, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n",
    "\n",
    "# Check if optimization was successful and extract decision variables (which mode to select for each order)\n",
    "optimal_shipping_modes = result_shipping_mode.x.reshape(len(data_cleaned), len(shipping_info)) if result_shipping_mode.success else None\n",
    "total_minimized_cost = result_shipping_mode.fun if result_shipping_mode.success else None\n",
    "\n",
    "optimal_shipping_modes, total_minimized_cost\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "7ef6a337-e462-457b-b338-d197adca28eb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[0.        , 0.        , 1.        , 0.        ],\n",
       "        [0.66666667, 0.        , 0.33333333, 0.        ],\n",
       "        [0.        , 0.        , 1.        , 0.        ],\n",
       "        ...,\n",
       "        [0.75      , 0.        , 0.        , 0.25      ],\n",
       "        [0.        , 1.        , 0.        , 0.        ],\n",
       "        [0.        , 1.        , 0.        , 0.        ]]),\n",
       " 158962.49999999997)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding delivery time constraints to the optimization\n",
    "\n",
    "def optimize_with_time_constraints(data, shipping_info, required_delivery_days, chunk_size=1000):\n",
    "    results = []\n",
    "    total_cost = 0\n",
    "\n",
    "    # Break data into manageable chunks\n",
    "    for i in range(0, len(data), chunk_size):\n",
    "        chunk = data.iloc[i:i+chunk_size]\n",
    "\n",
    "        # Cost coefficients for each order for each mode (flattened for linprog)\n",
    "        costs_chunk = np.array([info['cost'] for mode, info in shipping_info.items() for _ in range(len(chunk))])\n",
    "\n",
    "        # Constraints: Each order must have exactly one shipping mode selected\n",
    "        A_eq_chunk = np.zeros((len(chunk), len(costs_chunk)))\n",
    "        for row in range(len(chunk)):\n",
    "            for col in range(len(shipping_info)):\n",
    "                A_eq_chunk[row, row * len(shipping_info) + col] = 1  # Ensure one mode is selected\n",
    "\n",
    "        # Right-hand side of the constraints (one mode per order)\n",
    "        b_eq_chunk = np.ones(len(chunk))\n",
    "\n",
    "        # Additional constraints: Each order's selected mode must meet required delivery days\n",
    "        # Each shipping mode has a delivery time associated; compare with required delivery days\n",
    "        A_ub_chunk = np.zeros((len(chunk), len(costs_chunk)))\n",
    "        b_ub_chunk = required_delivery_days[i:i+chunk_size]  # Required delivery days for the current chunk\n",
    "\n",
    "        # Populate the time constraint matrix: only allow modes that satisfy the time constraint\n",
    "        for row in range(len(chunk)):\n",
    "            for col, mode in enumerate(shipping_info.keys()):\n",
    "                A_ub_chunk[row, row * len(shipping_info) + col] = shipping_info[mode]['days']\n",
    "\n",
    "        # Bounds: Binary decisions for each mode selection (0 or 1)\n",
    "        bounds_chunk = [(0, 1) for _ in range(len(costs_chunk))]\n",
    "\n",
    "        # Running the linear optimization to minimize costs with delivery constraints\n",
    "        result_chunk = linprog(costs_chunk, A_ub=A_ub_chunk, b_ub=b_ub_chunk,\n",
    "                               A_eq=A_eq_chunk, b_eq=b_eq_chunk, bounds=bounds_chunk, method='highs')\n",
    "\n",
    "        if result_chunk.success:\n",
    "            # Extract optimal decisions for this chunk\n",
    "            optimal_chunk = result_chunk.x.reshape(len(chunk), len(shipping_info))\n",
    "            results.append(optimal_chunk)\n",
    "            total_cost += result_chunk.fun\n",
    "        else:\n",
    "            # Placeholder if optimization fails\n",
    "            results.append(np.zeros((len(chunk), len(shipping_info))))\n",
    "\n",
    "    # Combine all results\n",
    "    combined_results = np.vstack(results)\n",
    "    return combined_results, total_cost\n",
    "\n",
    "# Assuming required delivery days are slightly adjusted for the sake of demonstration\n",
    "# For example: required within 4 days on average for demonstration (adjust per your data specifics)\n",
    "required_delivery_days = [4] * len(data_cleaned)  # Placeholder values for required delivery times\n",
    "\n",
    "# Execute the function with time constraints included\n",
    "optimal_modes_with_time, minimized_cost_with_time = optimize_with_time_constraints(\n",
    "    data_cleaned, shipping_info, required_delivery_days\n",
    ")\n",
    "\n",
    "optimal_modes_with_time, minimized_cost_with_time\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b94335b3-fb4d-4398-8a6b-60ea1d30832b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
